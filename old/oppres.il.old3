; load("oppres.il")
; foreach(mapcar c cdfGetInstCDF(css())~>parameters evalstring(c->callback||"" ))
update=t;<= Why  evalstring(paramR->callback) method does not work ?
defun( oppresSet ( Rt @optional (inst css()) (pourcent 0.0001)) ; oppresSet(1.2M) ou oppresSet("1.2M")
let( (paramL paramW paramRef paramR paramS Rold ratio pourcent)
paramL = cdfFindParamByName( cdfGetInstCDF(inst) "l"); => cdf:
paramW = cdfFindParamByName( cdfGetInstCDF(inst) "w"); => cdf:
paramReff = cdfFindParamByName( cdfGetInstCDF(inst) "reff"); => cdf:
paramR = cdfFindParamByName( cdfGetInstCDF(inst) "r"); => cdf:
paramS = cdfFindParamByName( cdfGetInstCDF(inst) "s"); => cdf:
paramL~>value="1.1u"
paramW~>value="0.32u"
paramS~>value=1;<= needed to update!!
if(update then 
foreach(mapcar c cdfGetInstCDF(inst)~>parameters evalstring(c->callback||"" ))
paramReff~>value=evalstring(paramR->callback)
paramR~>value=aelSuffixNotation(aelNumber(paramReff~>value)/paramS~>value)
else
schHiObjectProperty() hiFormDone(schObjPropForm))
printf("RES:%L\n" list( aelNumber(paramW~>value) aelNumber(paramL->value) aelSuffixNotation(aelNumber(paramReff->value)) paramS~>value paramR->value))
; paramReff->value
; inst=css() 
geSelectFig(inst);Si on rentre une instance et non css() il faut la rajouter dans la selection si on utilise schHiObjectProperty() hiFormDone(schObjPropForm)
when(type(Rt)=='string Rt=aelNumber(Rt) )
Rold=aelSuffixNotation(Rt)
; Rold="1.2M" Rt=1.2e6
printf("%s %s will now be of %s Ohm.%L\n" inst~>baseName inst~>cellName Rold list(paramL~>value paramW~>value paramS~>value))
when(aelNumber(paramL~>value)<aelNumber("1.1u") paramL~>value="1.1u")
when(aelNumber(paramW~>value)<aelNumber("0.32u") paramL~>value="0.32u")
when(aelNumber(paramL~>value)>aelNumber("1000u") paramL~>value="1000u")
when(aelNumber(paramW~>value)>aelNumber("1000u") paramL~>value="1000u")
; suppose paramS~>value=1 then increase L
while((and aelNumber(paramReff->value)<=aelNumber(Rold) aelNumber(paramL->value)<(aelNumber("1000u")/2)) 
paramL~>value=aelSuffixNotation(aelNumber(paramL->value)*2)
if(update then 
;printf( "L=%L_eval:%s\n" paramL~>value evalstring(paramR->callback))
foreach(mapcar c cdfGetInstCDF(inst)~>parameters evalstring(c->callback||"" ))
paramReff~>value=evalstring(paramR->callback)
paramR~>value=aelSuffixNotation(aelNumber(paramReff~>value)/paramS~>value)
else
schHiObjectProperty() hiFormDone(schObjPropForm));end update
printf("Reff=%L<%L L=%L eval=%L\n" paramReff->value Rold paramL->value foreach(mapcar c cdfGetInstCDF(inst)~>parameters evalstring(c->callback||"" )))
);end while
;=> augmenter paramS
ratio=ceiling(aelNumber(Rold)/aelNumber(paramReff->value))
paramS~>value=paramS~>value*ratio
printf("increasing Series bar by %d_%s %s\n" ratio Rold paramReff->value)
evalstring(paramS->callback)
if(update then
foreach(mapcar c cdfGetInstCDF(inst)~>parameters evalstring(c->callback||"" ))
paramReff~>value=evalstring(paramR->callback)
paramR~>value=aelSuffixNotation(aelNumber(paramReff~>value)/paramS~>value)
else
schHiObjectProperty() hiFormDone(schObjPropForm))
; def params
; Rt=aelNumber(Rold); Resistance Target
; fonction recursive
defun( dichoL (L1 L2 @optional (stop 0)) ; dichotomie algorithm; keyword dicotomie dicothomie
let(( m R) stop++
m=(L2+L1)/2
printf("L1=%s L2=%s m=%s Rt=%s R=%s\n" aelSuffixNotation(L1) aelSuffixNotation(L2) aelSuffixNotation(m) aelSuffixNotation(Rt) aelSuffixNotation(aelNumber(paramReff->value)))
if((or (L2-L1)/L2<=pourcent stop>=20) then when(stop>=20 printf("STOPED.")) printf("%g<%g?\n" (L2-L1)/L2 pourcent ) ; stop here
else
paramL~>value=aelSuffixNotation(m)
if(update then
foreach(mapcar c cdfGetInstCDF(inst)~>parameters evalstring(c->callback||"" ))
paramReff~>value=evalstring(paramR->callback)
paramR~>value=aelSuffixNotation(aelNumber(paramReff~>value)/paramS~>value)
else
schHiObjectProperty() hiFormDone(schObjPropForm))
R=aelNumber(paramReff->value)
if(R>Rt then printf("dichoL(%g %g)\n" L1 m)
dichoL(L1 m stop); on iter a gauche
else printf("dichoL(%g %g)\n" m L2)
dichoL(m L2 stop); on iter a droite
))))
; paramR~>value=aelSuffixNotation(aelNumber(paramReff->value)/aelNumber(paramS->value))

;; info sur inst  selection
dichoL(aelNumber(paramL->value)/2 1000u)
list(
aelNumber(paramW~>value)
aelNumber(paramL->value)
aelSuffixNotation(aelNumber(paramReff->value))
paramS~>value
paramR->value
)))
printf("oppresSet(1.2M)\n")
; oppresSet(1.2M) ou oppresSet("1.2M")

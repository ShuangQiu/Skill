x=4;;; There is 3 way of wrinting in skill
;; printf "The value of x is %n \n" x    ;; simplest way but wont be clear for a function of functions
;; printf("The value of x is %n \n" x)   ;; standard C-like syntax
;; (printf "The value of x is %n \n" x)  ;; standart lisp syntax, the recommend way to use it, but people usualy prefer C-like


libName = "Cells"
cellName = "inverter"
viewName = "schematic"
shapeCount = 200
printf("The design of %s %s %s is %n \n" libName cellName viewName shapeCount)

layerName= "MET_1"
purpose= "png"
rectCount= 7346546413516
labelCount= 10
lineCount=30
miscCount=50

printf(
/* "\n%-15s %-15s %-10d  %-10d  %-10d  %-10d " */
"\n%-15L %-15L %-10L  %-10L  %-10L  %-10L "
layerName
purpose
rectCount
labelCount
lineCount
miscCount
)

sprintf(cmd "echo \"%s\"" " Hello world" )
cmd=sprintf(nil "echo \"%s\"" " Hello world" )  ;; aString=sprintf(nil "%s %2.3g %d %L" "a" 3e-3 -12 '(a b aList));<==> standard way of using sprintf
(system cmd) ;; ==> renvoie sur le shell le resultat
;; (system "xterm") ;; <== will launch an xterm, ==> wait for it to close ==> freeze
;; (system "xterm&");; <== will launch an xterm in background

names = foreach( mapcar x i2cNames if(!listp(x) then sprintf(nil "%L\\n" x) else sprintf(nil "%L\\n" car(x)))) ;; pour les elements seul, "in"...
println(names)
sprintf(cmd "echo \"%L\"" names)
system(cmd)

aList = '(1 2 3) ;;;' quote <=> list si initialisation de la liste
aLongList = '(1 2 3 4 5 6 7 8) ;;;' quote <=> list si initialisation de la liste
aNestedList = '(1 (2 3) 4 5 (6 7)) ;;;' quote <=> list si initialisation de la liste
println( aList )
println( aLongList )
println( aNestedList )

printf("This is a liste :")

a=1 b=2
aList = list(a b)
bList = '(a b)   ;;;;  <== c'est une initialisation ==> pointeurs
a= 3
nth(0 bList)
eval(nth(0 bList))


result = '(1 2 3) ;;'
result = cons(result 1)
result = cons(1 result)  ;;<== erreur arg 1 doit etre une liste
result = cons(() 1 result)  ;;<== erreur cons a seulement 2 arguments

aList= nil
aList='()   ; equivalent'

aList=tconc(aList 1)
aList=tconc(aList 2)          	    ;; liste = tconc(liste1 liste2)
aList=tconc(aList 3)	      	    ;; ==> liste = ( (liste1 liste2) liste2)
aList=tconc(aList '(3 4 5 6)) 	    ;; tconc est mieux car il evite de creer 2 espaces memoire
println aList		      	    ;; il marche avec le pointeur sur le dernier element

result ='() for(i 0 31 result=tconc(result sprintf(nil "pad_%d" i))) result=car(result)


x0=10 y0=10  x1=10 y1=10
pinBox = list(x0:y0 x1:y1)
subst('(-10) 'y1 pinBox);==> marche pas car "list" fait un eval des valeurs pointÂŽÃÂŽ©es => pas de pointeur
subst('(-10) y1 pinBox);==> marche pas car change toutes les valeurs 10 par -10

pinBox = '(x0:y0 x1:y1)
subst('(-10) y1 pinBox) ;==> marche pas car y1 est la valeur pointÂŽÃÂŽ© par y1 et non le pointeur y1
subst('(-10) 'y1 pinBox);==> ' permet de substituer le pointeur
subst(-y1 'y1 pinBox);==> remplace y1 par -y1


numbers = '(1 2 3) ;==> (1 2 3)
member( 4 numbers)  ;;<== renvoie nil ou la liste tronce a  partir de l'element cherche
;;==> nil

numbers = '(1 2 3 4 9 5 4 6)
member( 4 numbers);;==> (4 9 5 4 6)
car(member( 4 numbers)) ;;==> 4

nthelem( 2 '( a b c ) ) ;==> b

A='(1 2 1 3 1 4 1 5) B='(1 3 5)
procedure(SubstractList(B A)
let((item)
while(B && A item=car(B) B=cdr(B) A=remove(item A) )
A))
SubstractList(B A)

;; foreach( mapcar x aList ...) renvoie la liste des derniers element evalues dans ...
aList=list("one" "two" list("three"))
foreach( mapcar x aList "tata");==> ("tata" "tata" "tata")
i=0 foreach( mapcar x aList i++ );==> (0 1 2)
i=0 foreach( mapcar x aList i++ sprintf(nil "tata_%d" i));==> ("tata_1" "tata_2" "tata_3")
foreach( mapcar x aList append(list(x) '("d sd" )  )) ;==>(("one" "d sd") ("two" "d sd") (("three") "d sd"))


full='("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15")
full='(("0") ("1") ("2") ("3") ("4") ("5") ("6") ("7") ("8") ("9") ("10") ("11") ("12") ("13") ("14") ("15"))
fourth=nil
fourtt=nil
for(i 1 4 fourth=append(fourth list(car(full))) full=cdr(full))
for(i 1 4 fourtt=tconc(fourtt car(full)) full=cdr(full))
println(fourth) ;==>(("0") ("1") ("2") ("3"))
println(fourtt) ;==>((("4") ("5") ("6") ("7")) ("7"))
println(car(fourtt)) ;==>(("4") ("5") ("6") ("7")

full='(("0") ("1") ("2") ("3") ("4") ("5") ("6") ("7") ("8") ("9") ("10") ("11") ("12") ("13") ("14") ("15"))
fourtt=nil
for(i 1 4 fourtt=tconc(fourtt car(full)) full=cdr(full))
println(fourtt) ;==>((("0") ("1") ("2") ("3")) ("3"))
println(car(fourtt)) ;==>(("0") ("1") ("2") ("3"))

nthcdr( 3 '( a b c d )) ;=> (d)
cdddr( '( a b c d )) ;=> (d)
nthcdr( 2 '( a b c d )) ;=> (c d)
cddr( '( a b c d )) ;=> (c d)
nthcdr( 1 '( a b c d )) ;=> (b c d)
cdr( '( a b c d )) ;=> (b c d)
z = '( 1 2 3 )
nthcdr( 2 z ); => ( 3 )

aList = '( a b c ) ;=> ( a b c )
subst( 'a 'b aList ) ;=> ( a a c )
anotherList = '( a b y ( d y ( e y )))
subst('x 'y anotherList ); => ( a b x ( d x ( e x )))

(
setof
 x
 numbers
 oddp(x)
)
help evenp ;; <=>isPaire?  |||  oddp <=> isImpaire?

'(0:0 10:10)    ;'  ==> ((X0:Y0)(X1:Y1))        <== danger ne donnera pas l effet escompte
list(0:0 10:10) ;   ==> ((X0 Y0)(X1 Y1))

one =1
two =2
three =3
moreNumbers = list( one two three)
moreNumbers

evenMoreNumbers = append( moreNumbers '(2 1)) ;;;' ))
;==> (1 2 3 2 1)

result = nil
result = cons(1 result)
result = cons(2 result)
result = cons(3 result)

reverse( result )


left = '(1 2 3)  ;; '
right = '(4 5 6) ;;'
leftRight = append(left right)
left
right


leftRight = append(left right)
rightLeft = append(right left)


cons(left right)
cons(right left)

list(7)

append(right list(7))
right
right=append(right list(7))
left =append(left list(4))

left = '(1 2 3)  ;; '
right = '(4 5 6) ;;'
cons(left right)
cons(cons(left right) right)
append(right cons(cons(left right) right))
     (println
append(right cons(left right))
     )

numbers = '(1 (2 3) ) ;;;'
type numbers
car numbers
cdr numbers
(car (cdr numbers))
(cadr numbers)
 window(3)
type  window(3)

hiGetCurrentWindow()->?
;; hiGetCurrentWindow()->stopLevel=0
hiGetWindowList

geOpen(
?lib "master"
?cell "mux2"
?view "schematic"
?mode "w"
)


alias(bk hiSetBindKey)

     view(
prependInstallPath("samples/local/schBindKeys.il")
)
    edit(
prependInstallPath("samples/local/schBindKeys.il")
)

hiSetWindowName(window(1) "Icfb")

ciwBBox = hiGetAbsWindowScreenBBox(window(1) t)

(foreach
nb_win
hiGetWindowList()
;;1 ;;; la une cest icfb dc pas besoin de la tester
;;length(hiGetWindowList())
(if
rexMatchp("Analog Design Environment" hiGetWindowName(nb_win))
hiSetWindowName(nb_win "ADE")
)
;;nb_win++
)

rexMatchp("lyopcs24" getShellEnvVar("HOSTNAME") )

rexCompile( "^[0-9]+" ) => t
rexExecute( "123abc" ) => t
rexSubstitute( "got: \\0")

nextLine="\t\t[** noise-noise **]\n"
rexExecute(nextLine)
rexCompile(".*-noise")
rexSubstitute( "got: \\0") ;=>""got:  noise-noise"

rexCompile(".*-noise")
rexReplace(nextLine "BRUIT" 1) ;=> "BRUIT **]\n"

cv= geGetWindowCellView()
     ;;==> db:199725100  ;;<== database identifiant
type cv
     ;;==> dbobject
cv~>objType              ;;==> "cellView"
dbGetq( cv objType )     ;;==> "cellView"
dbGetq <==> ~> ; 'tilde-chevron' : '~>'  est la fonction dbGetq

cv~>?
     ;;==> donne toutes les infos des attributs possibles
     ;;==> remarques tous les attributs avec un 's' sont normalement une liste d object sauf prop
cv~>??
     ;;==> affiches les valeurs des tous les attributs
cv~>instances~>??
     ;;==> affiches toutes les infos sur les instances dans la cellview en cours
car(cv~>instances)~>?
     car(cv~>instances~>?)  ;;<== marche aussi mais

cv~>instances~>name
instId = nth(2 cv~>instances)
instId~>??

length(cv~>nets)
(cv~>netCount)   ;; egaux me semble-t-il

objId = css() ;;<== reccup l objective id de l object selectionne
objId~>prop~>name
objId~>prop~>value
objId~>test1 ;;<== si on a ajouter un attribut dans les proprietes de l object il est accessible directement par son nom ==> valable uniquement pour les usesr defined attribut

dbFindProp(cv "instances")~>value ;; <== si on a un nom d attribut identique a un nom cadence predefinit

dbFindProp(objId "instances")~>value ;
dbFindProp(objId "test1")~>value ;

cv~>terminals ;; retourne les id des nets relatifs a des pins <=> terminaux
     ;;==>(db:200079672 db:199822956 db:199822616 db:199822412)
cv~>terminals~>name
println(geGetWindowCellView()~>terminals~>name)
     ;;==>("SEL" "Y" "B" "A")
cv~>nets~>term      ;; meme chose que ci dessus mais pas forcement ds le meme ordre
(println cv~>nets~>term)
;; (db:199822616 nil nil db:199822956 db:199822412 nil nil db:200079672 nil)
pinList='()
rexCompile(">")
foreach(mapcar p cv~>terminals~>name

css() ;; alias qui retourne l id de l object selectionne (le premier de l'ensemble des selectionnÂŽÃÂŽ©s c'est en fait : car(geGetSelectedSet())

dbFindTermByName( cv "SEL" )
     ;;==> db:200079672
cv~>nets~>name ;; retourne les noms de tous les nets

(println cv~>nets~>name)
     ;;==>("B" "net7" "net6" "Y" "A" "vdd!" "gnd!" "SEL" "net4")
cv~>layerPurposePairs
     ;;==>(db:200082396 db:199759444 db:199759476 db:199759508 db:199759540 db:199759572 db:199759604 db:199822340 db:199759056 )
(println     (car cv~>layerPurposePairs)~>? )
     ;;==> (cellView objType prop layerName layerNum nShapes numInstTypes purpose shapes)

(car cv~>??)

getWindowRep();; alias de geGetWindowCellView()

getWindowRep()~>instances~>?
getWindowRep()~>instances~>libNames
getWindowRep()~>instHeaders

getCurrentTime();=> "Feb 13 10:07:25 2013" renvoie la date
simDateStamp("HOHO") ;=> concatene la date avec la string hoho
stringToTime( getCurrentTime() );=> 1360747105
timeToString(stringToTime( getCurrentTime() )) ;=> back again "Feb 13 10:19:25 2013"
timeToString(3600+stringToTime( getCurrentTime() )) ;=> back again "Feb 13 10:19:25 2013"

t0=stringToTime(getCurrentTime());=> 1360749446
minute=60*1;*1sseconde
timeToString(0*minute+t0)
timeToString(1*minute+t0)
heure=60*minute
jour=24*heure
mois=30*jour
timeToString(1*mois+t0)
foreach(mapcar m linRg(1 12 1) timeToString(m*mois+t0))

foreach(mapcar m linRg(1 12 1) car(parseString(timeToString(m*mois+t0) " ")))
foreach(mapcar m linRg(1 12 1) car(parseString(timeToString((m-2)*mois+t0) " ")))
mois12='("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
i=0 foreach(mapcar m mois12 i++ sprintf(nil "%0.2d" i) )
i=0 tabMois=foreach(mapcar m mois12 i++ list(m sprintf(nil "%0.2d" i) ))
cadr(assoc("Feb" tabMois));=> "02"


(println (car getWindowRep()~>instHeaders) ~>? )
     ;;==>(cellView objType prop cellName instances libName master timeStamp variants viewName)
getWindowRep()~>instHeaders~>libName
getWindowRep()~>instHeaders~>libName="Ed"
     ;;<== equivaut a rename /!\ attention si plusieurs libName differents
(foreach
nb_win
getWindowRep()~>instHeaders~>libName
(if
rexMatchp("Ed" )
hiSetWindowName(nb_win "ADE")
)
;;nb_win++
)


getWindowRep()~>instHeaders~>libName
     ;;==> ("Ed" "master" "master" "master" "master" "M1_POLY1" "M1_POLY1" )
getWindowRep()~>instHeaders~>cellName
     ;;==> ("mux2" "Inv" "nand2" "M2_M1" "M2_M1" "M1_POLY1" "M1_POLY1" )
aa = setof(x getWindowRep()~>instHeaders  x~>cellName == "nand2")
     ;;==>(db:199822980)
aa~>libName = "Ed"
     ;;==> ("Ed")
myHeader = setof(x getWindowRep()~>instHeaders x~>libName == "Ed")
myHeader~>libName = "master"

     ;; si par exemple on a :
getWindowRep()~>instHeaders~>libName
     ;;==> ("master" "Ed" "master" "master" "master" "master")
     ;;alors
nth(1 getWindowRep()~>instHeaders)~>libName="master"
     ;;==>"master" ;;<== renomme en master le 2eme element


_itemsperline
     ;;==> 5 ;;<== revoie la valeur par defaut du nomre d element a afficher sur une seule ligne, qui peut etre eviter par println, mais on peux redefinir cette valeur

_itemsperline = 15 ;; <== va afficher 15 ele;ent avant de revenir a la ligne

cv= geGetWindowCellView()
cv~>instances~>name
cv~>instances~>cellName
length(cv~>shapes)
cv~>shapes~>objType

;; MENU
hiGetCIWindow ;; <=> window(1)
hiGetBannerMenus(window(1))

member('ciwOptionsMenu hiGetBannerMenus(window(1)))  ;; ' <== not egal 0 si le menu est present

member('TrRaiseCurrentWindow hiGetBannerMenus(window(1))) ;;' <== not egal 0 si le menu est present

(if (length member('TrPulldownMenu  hiGetBannerMenus(window(1))) )
 (hiDeleteBannerMenu window(1)
  (difference
   (length hiGetBannerMenus(window(1)) )
   (length  member('TrPulldownMenu  hiGetBannerMenus(window(1))))
   )
  )
)

;; CUSTOMIZATION
getSkillPath;;==> comme la var d environment PATH sous unix  ;==> ("/data/cadence/IC5.1.41_USR5/tools.lnx86/dfII/local" "." "~")
append(getSkillPath() '("~/../ebecheto/Skill/"))
setSkillPath(append(getSkillPath() '("~/../ebecheto/Skill/")))
;; mais comment faire lister les fonctions skill existantes dans les fichiers present dans le repertoire ?? foreach(file bindKeyFileList if(isFile(file) then loadi(file)))


prependInstallPath("") ;;==> "/data/cadence/IC5.1.41_USR5/tools.lnx86/dfII/"
     ;;==> equivaut presque a which icfb ;; system("which icfb") ;; /data/cadence/IC5.1.41_USR5/tools/dfII/bin/icfb


simplifyFilename("~/")
     ;;==> "/home/class9/"  ;;<== affiche le path absolu
simplifyFilename("../.")
     ;;==> "/home/class9/" ;;<==> ls  ..
simplifyFilename(".")   ;;<==> pwd

getShellEnvVar("USER")
println(getShellEnvVar("HOME"))
println(getShellEnvVar("PDK_OPT"))
println(getShellEnvVar("MGPROCESS"))
println(getShellEnvVar("LASTMETAL"))
println(getShellEnvVar("NUMMETAL"))
; setShellEnvVar("NUMMETAL=8")
;; FUNCTION PROCEDURE

;; definition de la fonction
procedure(
TrBBoxHeight(bBox)
     let( (ll ur lly ury ) ;; <== let assign a nil toutes ces variables locales
     ll= lowerLeft(bBox)
     ur= upperRight(bBox)
     lly= yCoord(ll)
     ury= xCoord(ur)
     ury - lly
     ); fin du let
     ); fin de la procedure

;; execution de la fonction
TrBBoxHeight(list( 100:100 250:390 ))

defun(bBoxWidth (bBox) caar(bBox)-caddr(bBox))


;; definition de la fonction
procedure(
TrBBoxArea(bBox)
     let( (X0 Y0 X1 Y1 area)

     X0 = xCoord(lowerLeft(bBox))
     X1 = xCoord(upperRight(bBox))

     Y0 = yCoord(lowerLeft(bBox))
     Y1 = yCoord(upperRight(bBox))

     area= (X1-X0)*(Y1-Y0)
     printf("[X0 %u] [X1 %u] [Y0 %u] [Y1 %u] of area : %u" X0 X1 Y0 Y1 area)
     area  ;;<== dernier argument est la valeure de retour
     ); fin du let
     ); fin de la procedure

;; execution de la fonction
TrBBoxArea(list( 100:120 250:390 ))

     aSquare = list(100:100 200:200)
     aHoriz  = list(100:100 250:100)
     aVert   = list(100:100 100:390)

     TrBBoxArea(aSquare)
     TrBBoxArea(aHoriz )
     TrBBoxArea(aVert  )


     var2 = 1  ;; var 2 est definit globalement
     bb = let(
(var1) var1=var2 printf("Var1 est : %u" var1)
1+1
)  ;; var1 est definit localement
     var1  ;; donc normalement et n est pas definit
     bb  ;; let revoir la valeur retournee par le derniere fonction applique


     procedure( TrEnterBoxCB( wid completed? box)
     when( completed? TrBBoxArea(box))
     ); proc

     procedure( TrEnterBox()
     enterBox(
?prompts '("First Corner" "Second Corner") ;; '
?doneProc "TrEnterBoxCB"
)
     ); proc

     hiSetBindKey("Layout" "<Key>F9" "TrEnterBox()")

     hiSetBindKeys("Command Interpreter"
     list(
    list(
 "Ctrl<Key>x"
t
;;     "(println \"hello World\")"
     "(print \"second\" )"
); EF
)
)


;; FLOW CONTROL

printf("%.30f" 1/3.0)
printf("%.17f" 1/3.0)

x=1 y=5
x<3 && y<4
x<3 && 1/0
y<4 && 1/0 ;; <== si la premiere expression est fausse le system s arrete et renvoie nil sans executer le suivant
1/0 && y<4

x<3 || y<4
x<3 || 1/0 ;; <== si la premiere expression est true => pas besion de tester la suivante


shapeType = "triangle"
case( shapeType
( "rect"
  recCount++
(println "Shape is a rectangle")
)
( "line"
  lineCount++
(println "Shape is a line")
)
( "label"
  labelCount++
(println "Shape is a label")
)
( "triangle" || "Triangle" || "TRIANGLE"
  triangleCount++
shapeType = "rect" ;; pour tester la difference avec le language C
(println "Shape is a triangle")
)
( "rect"
  recCount++
(println "Shape is a rectangle");<== ne passe pas la car break si une branche dessus est prise : different du language C
)
( t
  miscCount++
(println "Shape is a miscellaneous")
)
)

     ;; fonctions de test des types :
     numberp(3.3)
     numberp(3)
     floatp(3.3)
     floatp(3)
     fixp(3.3)
     fixp(3)
     ;; listp, stringp, symbolp, booleanp  existent aussi


; ceiling, fix, round, truncate
floor(2.2)==2.2;==> nil  ;; partie enfiÂŽÃÂŽ¨re entiere entière
floor(2.2)==2  ;==> t
floor(15/4)==(15/4.0) ;==> nil
floor(16/4)==(16/4.0) ;==> t

(for int 1 1000
(when int==10 int=999)  ;; <== on ne peux avoir access a la var int
(println int)
)



myPort = outfile("~/Skill/time.txt")
;;time=220
time=1520
(for int 1 28
(println fprintf(myPort "%dn d %dn d %dn h %dn h \\\n" time+1 time+20 time+21 time+40))
time=time+40
)
close(myPort) myPort=nil

     ;;  symbolToString  stringToSymbol simStringsToList evalstring("3"):=>3
;; evalstring

     ( foreach element list("rect" "polygon" "path" )
     printf("[%-15s | %15s ]\n" element concat(element "Count"))
     )

rectCountx = 10
aa = "rectCountx"
evalstring(aa)

evalstring(concat("rect" "Countx")) ;; <== error
type concat("rect" "Countx") ;; en effet c est un symbol e non une string
eval(concat("rect" "Countx")) ;; <== la solution est que un simple eval suffit
type strcat("rect" "Countx")  ;; <== renvoie une string
evalstring(strcat("rect" "Countx")) ;; <== marche aussi

rectCount=0
set(   concat(element "Count")    plus( eval(concat(element "Count")) 1) )


list_1='("a" "a" "a")
list_2='("b" "b" "b")
list_3='("c" "c" "c")

masterList='()
masterList=foreach(mapcar i linRg(1 3 1) eval(concat("list_" i)))


times(1705.02 1539.0);==> 'times' est la fonction multiplier
quotient(6 2);==>3  Prefix form of the / arithmetic operator. : division

myList = list( list('varA 1.0) list('varB 2.0) list('varC 4.0))
let(foreach(mapcar a myList car(a))
foreach(mapcar a myList
set(car(a) cadr(a))
printf("Now defined.sum=%f\n" varA+varB)
))
varA;<= error


aList=foreach(mapcar a myList car(a))
bList='(a b c otherVar)
cList=append(aList bList)
let( cList
foreach(mapcar a myList
set(car(a) cadr(a))
)
printf("Now defined.sum=%f\n" varA+varB)
)

rotation = 0
rotation = mod(rotation+90 360)
sprintf(nil "R%d" rotation)

edge = 0
edge++ test = zerop(mod(edge 4)); ==> t|nil une fois tout les 4

;; une maniere d ecrire une fonction qui supprime les doublons
procedure(singleList(aList) bList=nil foreach(elt aList unless(member(elt bList) bList = append(bList list(elt) )) ) bList)
singleList(wid~>shapes~>objType)
     ;; il y a surement plus simple avec une reccursion


;;FILE I/O
;; drain(myport)  ;; <=> flush en C ==> balance le resultat du buffer
;; gets : lit ligne par ligne


;; par defaut ouvre en ecrasement de fichier
myPort = outfile("~/SKILL/FileIO/MyFile.text")
     ;;myPort = outfile("~/SKILL/FileIO/MyFile.text" "w") ;;<== write
     ;;myPort = outfile("~/SKILL/FileIO/MyFile.text" "a") ;;<== append
outportp(myPort);; <== check that the variable my_port is an output port

lineCount = 0
fprintf( myPort "Line # %d \n" lineCount++)
fprintf( myPort "Line # %d \n" lineCount++)
fprintf( myPort "Line # %d \n" lineCount++)

     close(myPort)
     myPort;; <== myport pointe toujours vers le fichier
     outportp(myPort);; <== en effet, il est toujours compris comme tel
myPort=nil	 ;; <== il peut etre une bonne idee de l annuler

while(gets(nextLine fp) printf("%s\n" nextLine )) ;; <== lit tout le fichier et l'affiche dans icfb

myPort = infile("~/SKILL/FileIO/Solutions/MyFile.text")
nextLine = nil
gets(nextLine myPort)
nextLine
gets(nextLine myPort)
nextLine
gets(nextLine myPort)
nextLine
gets(nextLine myPort)
nextLine

myPort = infile("~/SKILL/FileIO/Solutions/MyFile.text")
fscanf( myPort "%s" word)
word
fscanf( myPort "%s" word)
word
fscanf( myPort "%s" word)
word
fscanf( myPort "%s" word)
word
fscanf( myPort "%[$]" word);; <== va a la fin et ne mets pas word a jour
;;<== retoure la valeur 0 si fin de fichier, sinon fscanf retourn 1
word

wordList=nil
myPort = infile("~/SKILL/FileIO/Solutions/MyFile.text")
fscanf( myPort "%s" word)
wordList=cons(word wordList)
fscanf( myPort "%s" word)
wordList=cons(word wordList)
fscanf( myPort "%s" word)
wordList=cons(word wordList)
close(myPort)
myPort=nil

myPort = infile("~/SKILL/FileIO/Solutions/MyFile.text")
fscanf( myPort "%[^0-9]" phrase)
fscanf( myPort "%d" number) ;;<== PROBLEM ICI

while(fscanf( myPort "%d:Ctrl-C" number)
     print(number)
     )
;; <== boucle infini si le dernier caracter n est pas un chiffre


;; pp <=> pretty print a defined function that is, an existing user defined procedure
pp(s);=> pp : ls is a read protected function and cannot be pretty printed
pp(artMenuTrigger)
pp(artExitTrigger)
pp(artEnableSchematicTrigger)

cv= geGetWindowCellView()
;;wid= window(9)
wid = geGetWindowCellView()

setof( x cv~>shapes~>objType x=="rect")  ;;<== sauvegarde les attributs
setof( x cv~>shapes x~>objType=="rect")  ;;<== sauvegarde les pointeurs ==> mieux!

singleList(wid~>shapes~>objType)
foreach(mapcar x singleList(wid~>shapes~>objType) concat(x "Count"))
;;==> (textDisplayCount rectCount pathCount)

cv~>layerPurposePairs~>?
cv~>shapes~>?

foreach( mapcar x cv~>shapes x~>objType)
foreach( mapcar x cv~>shapes x~>lpp)      ;;<== layer purpose pair

foreach( mapcar x cv~>shapes cons(x~>objType x~>lpp ))
cv~>layerPurposePairs~>layerName
;;==>("nwell" "pdiff" "cont" "ndiff" "text" "metal2" "poly1" "metal1" "changedLayer")


(ddGetObj "master")~>?
(ddGetObj "master")~>cells
((ddGetObj "master")~>cells)~>?

geOpen(?lib "analogLib" ?cell "vdc" ?view "spectre" ?mode "r")
nand2wid = geOpen(?lib "master" ?cell "nand2" ?view "layout" ?mode "r")

;; Ouvre, edit et donc lock la cellule tant qu elle ne sera pas fermee ==> close needed
;; dbOpenCellViewByType( ) ;;<== pour ouvrir une database sans interface graphique
dbOpenCellViewByType( "master" "mux2" list("layout" "schematic")) ;; <= pas bon, prend le premier element qui existe uniquement
dbOpenCellViewByType( "master" "mux2" "layout" )

cellview = dbOpenCellViewByType( "master" "mux2" "layout" "" "a")


cellview~>lpps
;;==> renvoie toutes les layer purpose pairs
(car cellview~>lpps)~>?
;;==> (cellView objType prop layerName layerNum nShapes numInstTypes purpose shapes)
(car cellview~>lpps)~>purpose
;;==>"drawing"

;; cv=geGetSelSet() cv~>layerPurposePairs ;==> nil nil nil
cv=geGetWindowCellView()
cv~>lpps

procedure( factorial( n ) if( zerop( n ) then  1 else   n*factorial( n-1)  ))

a='(1 2 3)
b='(4 5 6)

mapcan('list a b) ;=> (1 4 2 5 3 6)
mapcar('list a b) ;=> ((1 4) (2 5) (3 6))

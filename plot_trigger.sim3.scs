dir = openResults()
rexCompile( "/psf$" )
dir = rexReplace( dir "" 0 )
rexCompile( "/schematic$" )
dir = rexReplace( dir "" 0 )
;; dir = openResults() ; ==> "/data/ebecheto/Sim/trigger.sim3/spectre/schematic"
;; dir = "/data/ebecheto/Sim/1channel.sim2/spectre"
;; VF("/cmpDwn" "/data/ebecheto/Sim/trigger.sim3/spectre/schematic")


;;pos = list(0.2 0.95)
pos = list(0.5 0.95)
hi = 10
w_windowId = awvCreatePlotWindow()

N = 4

;; AC simulation 
;;x_subwindow = awvAddSubwindow( w_windowId ) 
awvPlaceWindowLabel( w_windowId pos "AC Simu" nil ?height hi )
;;awvLogYAxis( w_windowId 1 t ?subwindow x_subwindow)
awvLogYAxis( w_windowId 1 t ?subwindow 1)

nets='("/cmpUp" "/cmpDwn")
nets=nil
for(i 1 N nets=append(nets list(sprintf(nil "OUT_%d" i))))
for(i 1 N nets=append(nets list(sprintf(nil "PA_%d" i))))
(foreach element nets plot(VF(element) ?expr simStringsToList(element)))

;; ---------------------------
Title = "Transient Simulation"
x_subwindow = awvAddSubwindow( w_windowId ) 
awvPlaceWindowLabel( w_windowId pos Title nil ?height hi )

nets='("OUT" "OUTc")
nets=nil
nets='( "/cmpUp" "/cmpDwn" "/cmpUp4" "/cmpDwn4")
for(i 1 N nets=append(nets list(sprintf(nil "OUT_%d" i))))
for(i 1 N nets=append(nets list(sprintf(nil "PA_%d" i))))
(foreach element nets plot(VT(element dir) ?expr simStringsToList(element)))


;; ---------------------------
Title = "ENC Results"
x_subwindow = awvAddSubwindow( w_windowId ) 
awvPlaceWindowLabel( w_windowId pos Title nil ?height hi )

;; name = sprintf(nil "/OUT_%d" 1)
nets=nil
for(i 1 N nets=append(nets list(sprintf(nil "OUT_%d-noise" i))))
for(i 1 N nets=append(nets list(sprintf(nil "PA_%d-noise" i))))
;; (foreach element nets plot( sqrt(iinteg(  getData( "out" ?result element)**2 )* ( VDC( name ) - ymin(VT( name )) ) ) ?expr simStringsToList(element)) printf("add %L to waveform\n" list(element name)))


for(i 1 N 
name = sprintf(nil "/OUT_%d" i) noiseName = sprintf(nil "OUT_%d-noise" i )
plot(
((sqrt(iinteg(  getData( "out" ?result noiseName )**2    )) * (-1) * VAR("Qin")) / 1.6e-19 / (
(VAR("Qin") - abs(VAR("Qin")))/(2*VAR("Qin")) * ( VDC( name ) - ymin(VT( name )) ) -
(VAR("Qin") + abs(VAR("Qin")))/(2*VAR("Qin")) * ( ymax(VT( name )) - VDC( name ) ) ))
?expr simStringsToList(sprintf(nil "ENC%d" i ))
);;end plot
);; end for

when( t
for(i 1 N 
name = sprintf(nil "/PA_%d" i) noiseName = sprintf(nil "PA_%d-noise" i )
plot(
((sqrt(iinteg(  getData( "out" ?result noiseName )**2    )) * (-1) * VAR("Qin")) / 1.6e-19 / (
(VAR("Qin") - abs(VAR("Qin")))/(2*VAR("Qin")) * ( ymax(VT(name)) - VDC(name) ) -
(VAR("Qin") + abs(VAR("Qin")))/(2*VAR("Qin")) * ( VDC(name) - ymin(VT(name)) ) ))
?expr simStringsToList(sprintf(nil "ENCPA%d" i ))
));;end plot ;; end for
)




;; awvDisplayTitle( w_windowId "Wave")
;; ---------------------------
Title = "Notes"
x_subwindow = awvAddSubwindow( w_windowId ) 
awvPlaceWindowLabel( w_windowId pos Title nil ?height hi ?justify "center")
;;awvLogYAxis( w_windowId 1 t ?subwindow x_subwindow)

;; toPlot = list(VF("SHb") VF("SHc"))
;; foreach(element toPlot plot(element))


for(i 1 N 
name = sprintf(nil "/OUT_%d" i) linearName = sprintf(nil "linearity%d" i )
plot(
(-1)*(
(VAR("Qin") - abs(VAR("Qin")))/(2*VAR("Qin")) * ( VDC(name) - ymin(VT(name)) ) -
(VAR("Qin") + abs(VAR("Qin")))/(2*VAR("Qin")) * ( ymax(VT(name)) - VDC(name) ) 
)
?expr simStringsToList(linearName)
));;end plot ;; end for

when( t
for(i 1 N 
name = sprintf(nil "/PA_%d" i) linearName = sprintf(nil "linearity_PA%d" i )
plot(
((VAR("Qin") - abs(VAR("Qin")))/(2*VAR("Qin")) * ( ymax(VT(name)) - VDC(name) ) -
 (VAR("Qin") + abs(VAR("Qin")))/(2*VAR("Qin")) * ( VDC(name) - ymin(VT(name)) ) )
?expr simStringsToList(linearName)
));; end plot ;;end for
); end when



;; load("~/Skill/plots.scs") ;; to load my skill plotting file add in .cdsinit_personnal :: ;; hiSetBindKey("Schematics" "Ctrl<Key>w" "load(\"~/Skill/plots.scs\"")

/**** copyleft ************************************
* Authors : Edouard BECETHOILLE. IPNL (IN2P3-CNRS / UCBL ) MICRHAU *
* Version : 0.9   sept 2011                       *
* History :  pour s'ajuster aux lib std AMS_C35    *
***************************************************/

; load("padRing.il")
when(not(rexMatchList("~/../ebecheto/Skill" getSkillPath())) setSkillPath(cons("~/../ebecheto/Skill" getSkillPath())))
; sch and symbol createBox functions
load("padRing.proc.il")
load("padRing.sch.il")

procedure(createPadRing( l_pins @optional (spaceL 5) (spaceH 5) (libname getEditRep()~>libName) (cellname getEditRep()~>cellName) (IO "APRIOP") (GND "AGND3ALLP") (PWR "AVDD3ALLP") (inter "PERI_SPACER_100_P") (padCap "CORNERP") (padLib list("IOLIB_4M" "IOLIB_ANA_4M")) (price 650) )
let( (cv nPad nMiss cList rList tmp tmpList tmpLib tLib sx sy pinBox epinBox textBox etextBox x0 x1 y0 y1 step  norient lay l_mapPins  padLength cornerH cornerW pinList X Y inst METAL sign termSkip loop XP)
; nb of pads, missingPads, currentListElement,  remainingList, step in x, step in y
(setq lay "layout") METAL="MET1" termSkip="PAD" loop=0
printf("\n**** : %L\n" l_pins) printf("Generate Layout in %L %L with %L %L %L %L %L \n" libname cellname IO GND PWR inter padCap)
nPad = length(l_pins)/4 ; (/4!=/4.0)
when( nPad*4 != length(l_pins)
	nPad = nPad+1
	nMiss = nPad*4 - length(l_pins)
	for( i 1 nMiss  l_pins=append( l_pins list(list(inter inter)))) ;<== complète avec des spacer; mettre dimension 70
	;;for( i 0 nMiss-1  l_pins=append( l_pins list(list("gnd" GND)))) ;<==complète avec des gnd!
	); fin du when

unless( ddGetObj(libname) error("Couldn't open library %L. Please open any new layout.\n" libname)  )
cv = dbOpenCellViewByType( libname cellname "layout"   "maskLayout" "w")
cvp = dbOpenCellViewByType(libname cellname "layout_p" "maskLayout" "w")

;; Creation  d'un AST (Abstract Syntax Tree) de type list(list("padInstName" "padCell" "padLib") list("padInstName2" "padCell2" "padLib2") ...)
printf("PADLIST: %L \n" padLib)

ioLib=whereExistCell(IO padLib)       when(length(ioLib)>=2    printf("WARNING %L exist in multiple Library:%L Taking %L." ioLib car(ioLib))) ioLib=car(ioLib)
capLib=whereExistCell(padCap padLib)  when(length(capLib)>=2   printf("WARNING %L exist in multiple Library:%L Taking %L." capLib car(capLib))) capLib=car(capLib)
interLib=whereExistCell(inter padLib) when(length(interLib)>=2 printf("WARNING %L exist in multiple Library:%L Taking %L." interLib car(interLib))) interLib=car(interLib)
XP=0.5*caadr(getMaxPointsLayer((dbOpenCellViewByType interLib inter lay) METAL));spacePad/2

map1List = foreach( mapcar x l_pins if(!listp(x) then append(list(x) list(IO ioLib)) else x)) ;; pour les elements seul, "in", rajoute ("in" "PAD_IO" "PAD_IO_lib")
map2List = foreach( mapcar x map1List if(length(x)==1 then append(x list(IO ioLib)) else x)) ;; pour les elements seul, ("in"), rajoute ("in" "PAD_IO" "PAD_IO_lib")

rList = foreach( mapcar x map2List
if(length(x)==2 then
tmpLib=whereExistCell(cadr(x) padLib )
when(not(tmpLib) if(tLib=whereExistCell(cadr(x)) then printf("%L does not exist in %L but exist in cds.lib:%L. Please add it to the sensivity list.\n" cadr(x) padLib tLib)
else printf("%L does not exist in cds.lib?!\n" cadr(x))))
when(length(tmpLib)>=2 printf("WARNING %L exist in multiple Library:%L Taking %L." cadr(x) tmpLib car(tmpLib)) tmpLib=car(tmpLib))
when(type(tmpLib)=='list tmpLib=car(tmpLib))
if(tmpLib then append(x list(tmpLib))  else x_=append(list(x) list("TOCHANGE"))  )
else x));; pour les elements double, '("vdede" "AVDD3ALLP_3B"), rajoute la lib ("vdede" "AVDD3ALLP_3B" "IOLIB_ANA_3B_4M")

;;** Sch Sym creation du symbol et du schematic associé :
;procedure(createSch( l_pins @optional (library getEditRep()~>libName ) (cell getEditRep()~>cellName) (padLib "PAD_cell_S35D4") (padCap "PAD_capa") )
pinList=createSch(rList libname cellname padCap padLib); getEditRep()~>libName getEditRep()~>cellName padLib padCap)
printf("FROM_SCH_pinList= %L\n" pinList)
printf("LENGTH:%L?=%L\n" length(rList) length(pinList))
tmpList = rList

; printf("%L %L\n" IO ioLib)
padLength=bBoxWidth(getMaxPointsLayer((dbOpenCellViewByType ioLib IO "layout") METAL ))

;cornerH=bBoxWidth(getMaxPointsLayer((dbOpenCellViewByType capLib padCap "layout") "MET1" ))
;printf("(dbOpenCellViewByType %L %L \"layout\")\n" capLib padCap)
capBBox=getMaxPointsLayer((dbOpenCellViewByType capLib padCap "layout") METAL )
cornerH=caadr(capBBox)
cornerW=cadadr(capBBox)
; (setq padLength 150) ; MET1 abutment length for a PAD

; bBoxWidth('((-5.4 -5.4) (335.0 335.0)))
;(setq sx 330.0)  ; motif capa length to increment
;(setq sy 283.4)  ; motif capa height
(setq sx cornerW)  ; motif capa height to increment Xmax-origin (0):not negativ offset
(setq sy cornerH)  ; motif capa height

(setq sizeL 2*bBoxWidth(capBBox)+nPad*padLength+(nPad-1)*spaceL)  ; total Length
(setq sizeH 2*bBoxHeight(capBBox)+nPad*padLength+(nPad-1)*spaceH)  ; total Height
bBox = list(sizeL sizeH)


tmp=nil B=nil R=nil T=nil L=nil ;  coupe la liste en quatre suivant : Bottom Right Top Left

for(i 1 nPad tmp=tconc(tmp car(tmpList)) tmpList=cdr(tmpList)) B=car(tmp) tmp=nil
for(i 1 nPad tmp=tconc(tmp car(tmpList)) tmpList=cdr(tmpList)) R=car(tmp) tmp=nil
for(i 1 nPad tmp=tconc(tmp car(tmpList)) tmpList=cdr(tmpList)) T=car(tmp) tmp=nil
for(i 1 nPad tmp=tconc(tmp car(tmpList)) tmpList=cdr(tmpList)) L=car(tmp) tmp=nil

dX=0 X=0 Y=0 sign=1
norient=-1;         5  cornerW
;; ()foreach  BRTL '( (spaceL sx B) (spaceH sy R) (spaceL sx T) (spaceH sy L) );; re-cree une liste
(foreach instRef rList 

when(mod(loop nPad)==0
norient++
rot=sprintf(nil "R%d" 90*norient)
; when(norient==1||norient==3 (setq rListHL reverse(rListHL)))
; when(norient>=2 sign=-1)
sign=(-1)**mod(norient/2 2)

inst=(dbOpenCellViewByType capLib padCap lay) (dbCreateInst cv inst nil X:Y rot)
dX=caadr(getMaxPointsLayer(inst METAL))
X=X+sign*dX*mod(norient+1 2)
Y=Y+sign*dX*mod(norient   2)

if(mod(norient 2)==0 then inter=biggerPeri(spaceH) else inter=biggerPeri(spaceL)) ;/!\ techno dependant. TOCHANGE
; printf("INTER%L\n" list(spaceH spaceL inter mod(norient 2)) )
); FIRST instance of a new EDGE

;()foreach instRef rListHL ;; MAIN LOOP
instName =car(instRef)
instCell=cadr(instRef)
instLib=caddr(instRef)

; printf("MOD %L\n" '(loop/4 nPad))
when(mod(loop/4 nPad)!=0
inst=(dbOpenCellViewByType interLib inter lay) (dbCreateInst cv inst nil X:Y rot)
dX=caadr(getMaxPointsLayer(inst METAL))
X=X+sign*dX*mod(norient+1 2)
Y=Y+sign*dX*mod(norient   2)
)

;; INSERTION PAD ROW1 ;;
inst=(dbOpenCellViewByType instLib instCell lay)
d_inst=(dbCreateInst cv inst nil X:Y rot) ;ie. "PAD_IO" "RO" ou R90
dX=caadr(getMaxPointsLayer(inst METAL))
; printf("%f=getOrientLayer%L\n" dX list( inst METAL norient))

 ;; INSERTION text ROW1 ;;
dbCreateLabel(cv "text"  X+XP*(-1)**mod((norient+0)/2 2):Y+XP*(-1)**mod((norient+3)/2 2) instName "centerRight" sprintf(nil "R%d" mod(90*(norient+1) 360)) "stick" 40)
;printf("XY: %L %L \n" mod((norient+0)/2 2) mod((norient+1)/2 2) )

 ;; INSERTION pins+label ROW1 ;;
termName=instName
foreach(termLabel termPoints=(dbOpenCellViewByType instLib instCell "symbol")~>sigNames;=> ("PAD" "EN" "Y" "A")
termName=instName
dbPin=setof(term d_inst~>master~>terminals term~>name==termLabel);=>(db:0xc1c2c3)
foreach(sPin dbPin~>pins foreach(sfig sPin~>fig
sbBox=dbTransformBBox(sfig~>bBox d_inst~>transform)
when(termLabel!=termSkip&&length(termPoints)!=1  termName=sprintf(nil "%s_%s" termName termLabel))
leCreatePin(  cv sfig~>lpp "rectangle" sbBox termName "inputOutput" list("left" "right") )
dbCreateLabel(cv sfig~>lpp centerBox(sbBox)  termName "centerCenter" "R0" "roman" 3)
)))

when(pBox=getMaxPointsLayer(inst "PAD" ) pBox=dbTransformBBox(pBox d_inst~>transform)           ; for additionnal
leCreatePin(  cvp '("PIN" "pad") "rectangle" pBox termName "inputOutput" list("left" "right") ) ; pin for TOP cell
dbCreateLabel(cvp '("PIN" "pad") centerBox(pBox)  termName "centerCenter" "R0" "roman" 10))     ;

X=X+sign*dX*mod(norient+1 2)
Y=Y+sign*dX*mod(norient 2)

; for nPad (elements in instanceList)
;ending spacer before corner

;; inst=(dbOpenCellViewByType interLib inter lay) ;; TODO:loop intToPeriSpacer
;; (dbCreateInst cv inst nil X:Y rot)
;; dX=caadr(getMaxPointsLayer(inst METAL))
;; X=X+sign*dX*mod(norient+1 2)
;; Y=Y+sign*dX*mod(norient 2)

when(mod((loop-1)/4 nPad)==0
dX=cornerH;=cornerL
X=X+sign*dX*mod(norient+1 2)
Y=Y+sign*dX*mod(norient 2)
)


loop++);foreach orient 0;180 puis 90;270

;dbCreateLabel(cv "text"  (0:0) sprintf(nil "bBox (L, H) : %L. \nArea : %L mm2" bBox car(bBox)*cadr(bBox)/1000000.0) "centerRight" "R0" "stick" 40)
dbCreateLabel(cv "text"  (sx:0) sprintf(nil "bBox (L, H) :\n%L\nArea :\n%L mm2" bBox car(bBox)*cadr(bBox)/1000000.0) "upperRight" "R0" "stick" 40)
printf("bBox(L,H):%L price: %L " bBox price*(240+car(bBox))*(240+cadr(bBox))*1.0u)  printf(" Pad:%L nMiss %L\n" nPad*4 nMiss)

dbSave(cv) dbClose(cv) dbSave(cvp) dbClose(cvp)
l_pins
);let
);proc


nbOfPin = 52
result ='() for(i 1 nbOfPin result=tconc(result sprintf(nil "pad_%d" i))) result=car(result)


; USAGE :
padLib='("IOLIB_4M" "IOLIB_ANA_4M")

l_pins='(
( "VDD" "AVDD3ALLP") ( "VDD" "AVDD3ALLP") ( "VDD" "AVDD3ALLP") ( "VDD" "AVDD3ALLP")
"O1" "O2" "O3" "O4"
("GND" "AGND3ALLP") ("GND" "AGND3ALLP") ("GND" "AGND3ALLP")
("GND" "AGND3ALLP")
"I3"
("Idigital4" "BBCU4P")
"I2"
;("I1")
)

createPadRing( l_pins 10 50 "Ed_IC6" "RINGx" "APRIOP" "AGND3ALLP" "AVDD3ALLP" "PERI_SPACER_100_P" "CORNERP" padLib)



defun(scaleStringLine (nextLine @optional (mult '(nil)) (cols '(0)))
ligne=parseString(nextLine " ")
cond(
('(nil) printf("nothing should change [%L %L] in %L" mult cols nextLine) units='("1e0"))
(or(type(mult)=='fixnum type(mult)=='flonum) units=foreach(mapcar col cols sprintf(nil "%g" mult)))
(t ;==> take column exponent as scale argument
units=foreach(mapcar col cols 
;printf("%L" nthelem(col parseString(nextLine " ")))
strcat("1e" if(expo=cadr(parseString(nth(col parseString(nextLine " ")) "e")) expo "0"))
)

;mult='(1e-15)
ncol=-1 take=0
if(length(cols)>length(units) t)
towrite=foreach(mapcar x ligne ncol++
if(member(ncol cols) then 
unit=nth(take units)
printf("take %d unit=%L %L ncol%L %L\n" take unit x ncol cols)
scale=evalstring(unit)
printf("take %d unit=%L %L ncol%L\n" take unit x ncol)
take++
if(type(nb=evalstring(x))=='flonum then sprintf(nil "%g" nb/scale) else x)
else x)
)

);end true case
);end cond
list(towrite units);return args
)

aelSuffixNotation(evalstring("1e-15"))


nextLine="   10e-15           585.7           \n"

scaleStringLine(nextLine nil) ; ==> "   10e-15           585.7           \n" ;do nothing
scaleStringLine(nextLine t) ; ==> "   10           585.7           \n"
scaleStringLine(nextLine t '(0 1))
scaleStringLine(nextLine '(1e-15) '(0 1))
scaleStringLine(nextLine '(1e-15 1e3) '(0)) ; ==> "   10           0.5857           \n"



